Pasteler√≠a Cocina App ‚Äî Resumen de Avances
Objetivo
Aplicaci√≥n m√≥vil interna para la gesti√≥n de pedidos en una pasteler√≠a. El personal registra, consulta y administra pedidos confirmados con clientes.
Tecnolog√≠as: React Native (Expo), SQLite local (futuro: MySQL).

## üìÅ Estructura del Proyecto

### Frontend (React Native/Expo)
```
frontend/
‚îú‚îÄ‚îÄ app/                 # Navegaci√≥n y pantallas principales
‚îú‚îÄ‚îÄ components/          # Componentes reutilizables
‚îú‚îÄ‚îÄ constants/           # Constantes y configuraci√≥n de colores
‚îú‚îÄ‚îÄ assets/             # Im√°genes, fuentes y recursos
‚îú‚îÄ‚îÄ screens/            # Pantallas adicionales
‚îú‚îÄ‚îÄ app.json            # Configuraci√≥n de Expo
‚îú‚îÄ‚îÄ tsconfig.json       # Configuraci√≥n de TypeScript
‚îî‚îÄ‚îÄ package.json        # Dependencias del frontend
```

### Backend (Servicios y Base de Datos)
```
backend/
‚îú‚îÄ‚îÄ database/            # Esquemas y configuraci√≥n de BD
‚îÇ   ‚îî‚îÄ‚îÄ schema.ts       # Estructura de tablas
‚îú‚îÄ‚îÄ services/            # Servicios de datos
‚îÇ   ‚îî‚îÄ‚îÄ db.ts           # Conexi√≥n y operaciones de BD
‚îî‚îÄ‚îÄ package.json         # Dependencias del backend
```

### Beneficios de la Separaci√≥n:
- **Organizaci√≥n clara**: Frontend y backend separados por responsabilidades
- **Mantenimiento f√°cil**: Cada parte puede evolucionar independientemente
- **Escalabilidad**: F√°cil migraci√≥n a MySQL y API REST en el futuro
- **Desarrollo en equipo**: Diferentes desarrolladores pueden trabajar en paralelo

## Paleta de Colores Implementada

### Colores Principales:
- **Rosa claro (fondo principal)**: `#FDC8E3` - Fondo general de la aplicaci√≥n
- **Rosa medio (acentos, botones secundarios)**: `#F28DB2` - Botones secundarios y elementos de acento
- **Rosa fuerte/Fucsia (botones principales)**: `#E75480` - Bot√≥n principal "Nuevo Pedido" y elementos destacados
- **Lila suave (fondos de tarjetas)**: `#D6A8E9` - Fondos de tarjetas o men√∫s
- **Morado oscuro (texto, t√≠tulos)**: `#5E336F` - T√≠tulos, encabezados y texto principal
- **Blanco**: `#FFFFFF` - Para dar descanso visual y fondos de inputs
- **Negro suave**: `#2C2C2C` - Para texto legible en contraste

### Aplicaci√≥n en la Interfaz:
- **Fondo general**: Rosa claro `#FDC8E3` (uniforme y menos saturado)
- **Bot√≥n "Nuevo Pedido"**: Fucsia `#E75480` con texto blanco (m√°s llamativo)
- **Botones secundarios**: Rosa medio `#F28DB2` con texto morado oscuro
- **T√≠tulo "Gesti√≥n de Pedidos"**: Morado oscuro `#5E336F` para contraste
- **Inputs**: Bordes rosa medio, fondo blanco, texto negro suave
- **Iconos activos**: Morado oscuro para mejor visibilidad

Funcionalidades principales (plan general)
Login simple (solo contrase√±a).
Pantalla de inicio con 4 botones:
Nuevo Pedido
Ver Pr√≥ximos Pedidos
Modificar Rellenos y Masas
Configuraci√≥n (esquina superior derecha)
Navegador inferior (bottom tab):
Inicio
Calendario de pedidos
Notificaciones locales configurables.
Persistencia en SQLite.
Avances hasta ahora
Estructura de carpetas organizada (components, screens, services, database, etc.).
Navegaci√≥n implementada con react-navigation y tabs.
Pantalla de Login funcional (validaci√≥n de contrase√±a local).
Pantalla de Inicio con los 3 botones principales y acceso a Configuraci√≥n.
Barra de navegaci√≥n inferior con:
Tab de Inicio
Tab de Calendario (ya creada, muestra mensaje b√°sico)
Pantallas ocultas en la barra: Nuevo Pedido, Pr√≥ximos Pedidos, Rellenos y Masas, Configuraci√≥n.
Esquema b√°sico de SQLite preparado para pedidos (por revisar/expandir seg√∫n necesidades).
Pr√≥ximos pasos sugeridos
Implementar la pantalla de ‚ÄúNuevo Pedido‚Äù (formulario y guardado en SQLite).
Mejorar la pantalla de Calendario para mostrar pedidos por fecha.
Implementar la pantalla de ‚ÄúVer Pr√≥ximos Pedidos‚Äù (lista editable).
Pantalla de ‚ÄúModificar Rellenos y Masas‚Äù.
Configuraci√≥n de notificaciones locales.
Mejorar la experiencia visual y de usuario.

Idea Inicial *Solo para tener un contexto"
(Estoy desarrollando una aplicaci√≥n m√≥vil **interna** para una pasteler√≠a. Esta app est√° pensada para el personal que gestiona los pedidos confirmados con clientes despu√©s de una reuni√≥n presencial. La aplicaci√≥n ser√° construida con **React Native** y la base de datos ser√° **SQLite local** inicialmente, pero en el futuro se migrar√° a una soluci√≥n en la nube como MySQL.

### Objetivo de la App:
La app servir√° para **registrar, consultar y gestionar** los pedidos programados en la pasteler√≠a. No es una app para clientes.

### Funcionalidades principales:

1. **Login simple**:
   - Solo requiere una contrase√±a (sin usuario).
   
2. **Pantalla de inicio con 4 botones principales**:
   - **Nuevo Pedido** (bot√≥n principal y m√°s grande).
   - **Ver Pr√≥ximos Pedidos** (lista ordenada por fecha) debe incluir un bot√≥n peque√±o por pedido que permita modificar lo que se ingreso.
   - **Modificar Rellenos y Masas** (pantalla para editar los sabores disponibles).
   - **Navegador inferior con dos botones**:
     - Ver Calendario con pedidos por fecha.
     - Regresar al Inicio.

3. **Nuevo Pedido** debe incluir:
   - Fecha de entrega.
   - Nombre del pedido.
   - Precio final.
   - Monto abonado.
   - Productos: pueden incluir varios de los siguientes en un solo pedido, se pueden agregar varios a un solo pedido:
     - Pastel: sabor, relleno, tama√±o.
     - Cupcakes: sabor, relleno, cantidad, 
opci√≥n de minicupcakes.
     - Otros productos (galletas, espumillas, trenzas, cakepops, paletas, etc.)
   - Imagen de referencia.
   - Descripci√≥n opcional.

4. **Boton de Configuraci√≥n en la esquina superior derecha**:
   - Opci√≥n para configurar recordatorios (notificaciones locales).
   - El usuario puede elegir con cu√°ntos d√≠as de anticipaci√≥n quiere recibir una notificaci√≥n de entrega pr√≥xima.
   - Activar/desactivar notificaciones.
   - Otras recomendadas.

5. **Notificaciones**:
   - Se deben enviar notificaciones locales usando `expo-notifications` a partir de las preferencias del usuario.

6. **Persistencia**:
   - Toda la informaci√≥n se guardar√° en SQLite usando `expo-sqlite` o `react-native-sqlite-storage`.
   - Los datos deben poder migrarse en el futuro a MySQL.

### Estructura sugerida de carpetas:
/pasteleria-cocina-app
‚îú‚îÄ‚îÄ /components/
‚îú‚îÄ‚îÄ /screens/
‚îú‚îÄ‚îÄ /services/
‚îú‚îÄ‚îÄ /database/
‚îú‚îÄ‚îÄ App.js
‚îî‚îÄ‚îÄ navigation.js

markdown
Copiar
Editar
*Recordar que el comando && no funciona en estas versiones*

### ¬øQu√© necesito que generes ahora?
Comienza por generar:
- La estructura b√°sica del proyecto con navegaci√≥n (`react-navigation`).
- La pantalla de Login funcional que solo valide una clave local.
- La pantalla de Inicio con los 4 botones mencionados.
- Un esquema b√°sico para guardar pedidos con SQLite.

Trabajaremos el resto en etapas. Todo debe estar optimizado para uso interno, fluido y claro para el usuario.)

""Primer registro"
Estoy desarrollando una aplicaci√≥n m√≥vil **interna** para una pasteler√≠a. Esta app est√° pensada para el personal que gestiona los pedidos confirmados con clientes despu√©s de una reuni√≥n presencial. La aplicaci√≥n ser√° construida con **React Native** y la base de datos ser√° **SQLite local** inicialmente, pero en el futuro se migrar√° a una soluci√≥n en la nube como MySQL.

### Objetivo de la App:
La app servir√° para **registrar, consultar y gestionar** los pedidos programados en la pasteler√≠a. No es una app para clientes.

### Funcionalidades principales:

1. **Login simple**:
   - Solo requiere una contrase√±a (sin usuario).
   
2. **Pantalla de inicio con 4 botones principales**:
   - **Nuevo Pedido** (bot√≥n principal y m√°s grande).
   - **Ver Pr√≥ximos Pedidos** (lista ordenada por fecha) debe incluir un bot√≥n peque√±o por pedido que permita modificar lo que se ingreso.
   - **Modificar Rellenos y Masas** (pantalla para editar los sabores disponibles).
   - **Navegador inferior con dos botones**:
     - Ver Calendario con pedidos por fecha.
     - Regresar al Inicio.

3. **Nuevo Pedido** debe incluir:
   - Fecha de entrega.
   - Nombre del pedido.
   - Precio final.
   - Monto abonado.
   - Productos: pueden incluir varios de los siguientes en un solo pedido, se pueden agregar varios a un solo pedido:
     - Pastel: sabor, relleno, tama√±o.
     - Cupcakes: sabor, relleno, cantidad, 
opci√≥n de minicupcakes.
     - Otros productos (galletas, espumillas, trenzas, cakepops, paletas, etc.)
   - Imagen de referencia.
   - Descripci√≥n opcional.

4. **Boton de Configuraci√≥n en la esquina superior derecha**:
   - Opci√≥n para configurar recordatorios (notificaciones locales).
   - El usuario puede elegir con cu√°ntos d√≠as de anticipaci√≥n quiere recibir una notificaci√≥n de entrega pr√≥xima.
   - Activar/desactivar notificaciones.
   - Otras recomendadas.

5. **Notificaciones**:
   - Se deben enviar notificaciones locales usando `expo-notifications` a partir de las preferencias del usuario.

6. **Persistencia**:
   - Toda la informaci√≥n se guardar√° en SQLite usando `expo-sqlite` o `react-native-sqlite-storage`.
   - Los datos deben poder migrarse en el futuro a MySQL.

### Estructura sugerida de carpetas:
/pasteleria-cocina-app
‚îú‚îÄ‚îÄ /components/
‚îú‚îÄ‚îÄ /screens/
‚îú‚îÄ‚îÄ /services/
‚îú‚îÄ‚îÄ /database/
‚îú‚îÄ‚îÄ App.js
‚îî‚îÄ‚îÄ navigation.js

markdown
Copiar
Editar

### ¬øQu√© necesito que generes ahora?
Comienza por generar:
- La estructura b√°sica del proyecto con navegaci√≥n (`react-navigation`).
- La pantalla de Login funcional que solo valide una clave local.
- La pantalla de Inicio con los 4 botones mencionados.
- Un esquema b√°sico para guardar pedidos con SQLite.

Trabajaremos el resto en etapas. Todo debe estar optimizado para uso interno, fluido y claro para el usuario."

## Bit√°cora de trabajo ‚Äî 2025-09-14

### Cambios funcionales
- Nuevo Pedido:
  - Selector de fecha: DateTimePicker en m√≥vil y `<input type="date">` en web. Calendario visible y fecha m√≠nima hoy.
  - Productos: combos de Sabores y Rellenos poblados desde ‚ÄúRellenos y Masas‚Äù.
  - Validaciones num√©ricas: precio y abonado; se impide abonado > precio.
  - Feedback al guardar: confirmaci√≥n (Alert en m√≥vil / confirm nativo en web), limpieza del formulario y regreso autom√°tico.
- Pr√≥ximos Pedidos:
  - Eliminar pedido con confirmaci√≥n multiplataforma.
  - Edici√≥n completa: ahora se puede editar Fecha de entrega y Productos (agregar, editar y eliminar) desde el modal.
  - Modal de Agregar/Editar Producto: tipo (pastel/cupcakes/otros), sabores filtrados por tipo, rellenos, tama√±o, cantidad y descripci√≥n.
  - Regla para ‚Äúotros‚Äù: se ocultan Sabor/Relleno/Tama√±o/Cantidad y solo se usa Descripci√≥n.
- Rellenos y Masas:
  - Bot√≥n eliminar con confirmaci√≥n multiplataforma.
  - Lista con recarga autom√°tica tras crear/editar/eliminar.
- Login:
  - Feedback de error: Alert/alert y mensaje visual bajo el input.

### Sincronizaci√≥n de datos
- Se agreg√≥ recarga autom√°tica con `useFocusEffect` en:
  - Nuevo Pedido (sabores/rellenos),
  - Pr√≥ximos Pedidos (sabores/rellenos),
  - Rellenos y Masas (lista).

### UX/Responsive
- Modales de edici√≥n ahora son responsivos: scroll interno, altura m√°x. 80‚Äì90%, ancho 100% (m√°x. 500px), botones accesibles fijos.
- Combos con altura limitada y mejor legibilidad.

### Detalles t√©cnicos
- Uso de `Platform.OS` para comportamientos web/m√≥vil (Alert vs confirm, pickers de fecha).
- Persistencia de `fecha_entrega` en edici√≥n de pedidos.

### C√≥mo probar hoy
1) Crear/editar pedido desde ‚ÄúNuevo Pedido‚Äù: elegir fecha en calendario, a√±adir productos, guardar (ver confirmaci√≥n y regreso).
2) En ‚ÄúRellenos y Masas‚Äù crear/eliminar sabores o rellenos y verificar que ‚ÄúNuevo Pedido‚Äù y ‚ÄúPr√≥ximos Pedidos‚Äù reflejan los cambios al volver.
3) En ‚ÄúPr√≥ximos Pedidos‚Äù editar: cambiar fecha, agregar/editar/eliminar productos y guardar.
4) Probar productos de tipo ‚Äúotros‚Äù: solo aparece y se guarda la descripci√≥n.
5) Login: introducir clave incorrecta y ver feedback visual.

### Pendientes pr√≥ximos
- Pantalla de Configuraci√≥n con notificaciones locales (recordatorios por fecha de entrega).
- B√∫squeda y filtros en Pr√≥ximos Pedidos.
- Exportar/backup (CSV/JSON) y totales por rango.

## Bit√°cora de trabajo ‚Äî 2025-09-16

### Cambios funcionales
- Configuraci√≥n de Notificaciones:
  - Nueva UI en `app/(tabs)/settings.tsx` para activar/desactivar notificaciones y elegir d√≠as de anticipaci√≥n (0 a 7).
  - Persistencia en BD: `settings.notifications_enabled` y `settings.days_before`.
- Recordatorios de Pedidos:
  - Al crear pedido: se programa notificaci√≥n a las 9:00 AM del d√≠a definido por `days_before` respecto a `fecha_entrega`.
  - Al editar pedido: se cancela la notificaci√≥n previa (si existe) y se reprograma con la nueva fecha.
  - Al eliminar pedido: se cancela la notificaci√≥n programada.
  - Web: no se programan notificaciones (compatibilidad mantenida sin errores). En m√≥vil (Expo) s√≠ se programan con `expo-notifications`.

### Correcciones
- Error al abrir Configuraci√≥n en web: ‚ÄúobtenerSettings is not a function‚Äù.
  - Soluci√≥n: ajuste de importaci√≥n en `settings.tsx` (namespace + guardas) y verificaci√≥n de exportaciones en `services/db.web.ts`.

### Detalles t√©cnicos
- SQLite (`frontend/services/db.ts`):
  - Tabla `settings` con fila √∫nica (id=1).
  - Tabla `notifications` para mapear `pedido_id -> notification_id`.
  - Funciones: `obtenerSettings`, `guardarSettings`, `getNotificationIdForPedido`, `setNotificationIdForPedido`, `clearNotificationForPedido`.
- Web LocalStorage (`frontend/services/db.web.ts`):
  - Claves: `pasteleria_settings` y `pasteleria_notifications` (mapa `pedidoId -> notificationId`).
  - Funciones equivalentes a SQLite para settings y notificaciones.
- Servicio de notificaciones:
  - `frontend/services/notifications.ts` (m√≥vil): `schedulePedidoNotification`, `cancelNotificationById` y handler por defecto de `expo-notifications`.
  - `frontend/services/notifications.web.ts` (web): implementaciones no-op que devuelven `null`/no lanzan errores.
- Integraci√≥n en pantallas:
  - `app/(tabs)/nuevo-pedido.tsx`: tras crear pedido, programa notificaci√≥n y guarda `notification_id`.
  - `app/(tabs)/proximos-pedidos.tsx`: al editar, cancela y reprograma; al eliminar, cancela y limpia el mapeo.
  - `app/(tabs)/settings.tsx`: UI, permisos (m√≥vil), persistencia de settings.

### C√≥mo probar hoy
1) En Configuraci√≥n, activar notificaciones y elegir ‚Äú1 d√≠a‚Äù.
2) Crear un pedido con `fecha_entrega` ma√±ana y confirmar que se programa el recordatorio.
3) Editar el pedido y cambiar la fecha; verificar que se reprograma (sin duplicados).
4) Eliminar el pedido; verificar que se cancela la notificaci√≥n.
5) En web, confirmar que no hay errores aunque no se programen notificaciones.

### Pendientes pr√≥ximos
- B√∫squeda y filtros en Pr√≥ximos Pedidos (por nombre, fecha, estado).
- Exportar/backup (CSV/JSON) y restauraci√≥n.
- Totales/balance por rango de fechas.
- Accesibilidad y UX: tama√±os t√°ctiles, foco, mensajes consistentes.
- Rendimiento: memo en listas, `keyExtractor` estable, evitar renders en modales.
- Build Android: √≠conos/splash definitivos, EAS build, permisos.
- Tests b√°sicos: navegaci√≥n y CRUD (web/SQLite).

## Bit√°cora de trabajo ‚Äî 2025-09-17

### Cambios funcionales
- Pr√≥ximos Pedidos:
  - Barra de totales (Total, Abonado, Debe) con opci√≥n de copiar/compartir resumen.
  - Bot√≥n ‚ÄúAbonar‚Äù por pedido (web: prompt; m√≥vil: modal) con validaciones y actualizaci√≥n de `monto_abonado`.
  - Etiquetas actualizadas: ‚ÄúPendiente‚Äù ‚Üí ‚ÄúDebe‚Äù.
  - Filtros y barra de totales ahora son retr√°ctiles.
  - Ajustes visuales de inputs de fecha y separaciones.
- Nuevo Pedido:
  - Bot√≥n ‚Äú+ Agregar‚Äù de productos m√°s grande y de ancho completo.
  - Selector de fecha centrado y con altura consistente.
- Navegaci√≥n:
  - Tabs inferiores actualizados a 4: Inicio, Calendario, Cotizaciones y Pr√≥ximos.
- Cotizaciones:
  - Nueva pantalla con formulario (cliente y productos con cantidad, precio unitario y descripci√≥n).
  - Generaci√≥n de PDF formal con logo y tipograf√≠a m√°s seria (Times New Roman).
  - Moneda fija en Quetzales (Q) en toda la app/PDF.
  - Guardado/descarga en Android usando Storage Access Framework (nombre: `CotizacionSweetCakes-DDMMYY.pdf`).
  - En web: di√°logo de impresi√≥n/guardar.
  - Validez actualizada a 15 d√≠as y bloque de contacto al final.
- Configuraci√≥n:
  - Campos editables para Cotizaciones: Nombre de contacto, Empresa y Tel√©fono.
  - Bot√≥n ‚ÄúGuardar cambios‚Äù (ya no se guarda en caliente) y solicitud de permisos si se activan notificaciones.
- Calendario:
  - Badges con conteo de pedidos por d√≠a.
  - Colores por carga: 1‚Äì2 pedidos (suave), 3+ (intenso).
  - Modal al tocar un d√≠a (ver pedidos; acceso a ‚Äú+ Nuevo‚Äù).

### Ajustes visuales y de moneda
- Toda la app usa Quetzales (Q) con 2 decimales.
- Se corrigieron desalineaciones y tama√±os en botones y selectores.

### Pendientes pr√≥ximos
- Optimizaci√≥n del Calendario (prioridad):
  - Alinear y escalar la cuadr√≠cula de forma perfecta en web y pantallas horizontales.
  - Bot√≥n ‚ÄúHoy‚Äù y resaltado de la fecha actual (implementado).
  - Auto-ajuste vertical seg√∫n semanas visibles para evitar espacio vac√≠o inferior (implementado, requiere pruebas en m√°s resoluciones).
  - Afinar estilos y tipograf√≠as del grid.
  - Personalizaci√≥n de plantilla (colores, encabezados, notas) y pruebas en iOS.
- Pr√≥ximos Pedidos:
  - Exportar/backup (CSV/JSON) por rango y totales.
  - B√∫squedas y filtros avanzados.
- Accesibilidad/UX:
  - Indicadores t√°ctiles, estados de foco y tama√±os m√≠nimos.
- Rendimiento:
  - Revisi√≥n de re-renders en listas y memoizaci√≥n.
- Build Android:
  - √çconos/splash finales y permisos definitivos.

## Bit√°cora de trabajo ‚Äî 2025-09-18

### Cambios funcionales
- Calendario:
  - Recarga autom√°tica al enfocar con `useFocusEffect` y pull-to-refresh con `RefreshControl`.
  - Correcci√≥n de desfase de fechas por zona horaria: uso de helpers locales (YYYY-MM-DD) tanto al generar la grilla como al parsear fechas guardadas.
  - Auto-ajuste de alto de celdas seg√∫n n√∫mero real de semanas del mes (sin forzar 6 filas), eliminando espacio vac√≠o en la parte inferior de la grilla.
- Nuevo Pedido:
  - Bot√≥n Guardar robustecido en web/m√≥vil: funci√≥n de mensajes unificada (alert/alert) y normalizaci√≥n de fecha a formato local `YYYY-MM-DD`.
- Pr√≥ximos Pedidos:
  - Formateo de fecha usando parser local para evitar corrimientos por zona horaria.
- Estad√≠sticas:
  - Nueva pesta√±a visible en la barra inferior con totales generales (cantidad, total, abonado, debe) y resumen por mes; soporte de pull-to-refresh.

### Navegaci√≥n/Barra inferior
- Renombrada pesta√±a `two` a ‚ÄúEstad√≠sticas‚Äù con √≠cono de gr√°fico.
- Ajustes de estilo de la barra para ocupar la base de la pantalla; a√∫n queda pendiente optimizar distribuci√≥n para eliminar un peque√±o espacio a la derecha en ciertos anchos de ventana.

### Pendientes pr√≥ximos
- Footer/Tabs: asegurar distribuci√≥n 100% sin huecos en todos los breakpoints (investigar `tabBarButton` custom y medici√≥n de ancho en web; revisar zoom del navegador).
- Calendario: pruebas en iOS/Android y navegadores; ajustar tipograf√≠as y tama√±os m√≠nimos.
- Estad√≠sticas: filtros por rango de fechas y exportaci√≥n a CSV.

## Bit√°cora de trabajo ‚Äî 2025-09-20

### Sistema de Autenticaci√≥n Multiusuario
- **Login multi-rol implementado**: 3 usuarios con permisos diferenciados
  - üëë **Admin**: Acceso completo a toda la aplicaci√≥n
  - üíº **Due√±o**: Acceso completo (igual que admin)
  - üë®‚Äçüç≥ **Repostero**: Acceso solo lectura (Pr√≥ximos Pedidos y Calendario)

- **Credenciales por defecto**:
  - Admin: `admin2024` (Administrador)
  - Due√±o: `dueno2024` (Raquel)
  - Repostero: `repostero2024` (Repostero)

### Control de Acceso por Roles
- **Tabs din√°micas**: Las pesta√±as se ocultan autom√°ticamente seg√∫n permisos
  - Repostero: Solo ve "Inicio" y "Calendario" (sin "Cotizaciones" ni "Estad√≠sticas")
- **Botones condicionales**: Los botones de crear/editar se ocultan para usuarios sin permisos
- **Protecciones en todas las pantallas**:
  - Calendario: Bot√≥n "+ Nuevo" solo para admin/due√±o
  - Pr√≥ximos Pedidos: Botones de editar/eliminar solo para admin/due√±o
  - Inicio: Botones seg√∫n rol del usuario

### Correcciones T√©cnicas
- **Error de React Hooks resuelto**: Problema de orden de hooks en TabLayout corregido
- **Paquetes faltantes instalados**:
  - `expo-print` para generaci√≥n de PDFs en cotizaciones
  - `expo-sharing` para compartir archivos
- **Mensajes de bienvenida personalizados**:
  - Admin: "Bienvenido, Administrador"
  - Due√±o: "Bienvenida, Raquel"
  - Repostero: "Bienvenido, Repostero"

### Arquitectura de Autenticaci√≥n
- **Context API**: `AuthContext` para gesti√≥n global de usuario y permisos
- **Base de datos**: Tabla `users` con roles y credenciales
- **Compatibilidad**: Funciona en web (localStorage) y m√≥vil (SQLite)
- **Seguridad**: Validaci√≥n de permisos en todas las operaciones sensibles

### Pendientes para ma√±ana (2025-09-21)
- **Optimizaci√≥n m√≥vil**: Probar en Android/iOS reales, ajustar UX t√°ctil
- **Mejoras visuales**: Animaciones suaves, estados de carga
- **Pruebas exhaustivas**: Flujo completo con todos los roles
- **Documentaci√≥n**: README actualizado con gu√≠a de usuarios

### Estado actual del proyecto
‚úÖ **Funcionalidades completas**: Login multiusuario, CRUD pedidos, cotizaciones PDF, estad√≠sticas, calendario, configuraci√≥n
‚úÖ **Sistema de roles operativo**: Control de acceso funcionando correctamente
‚úÖ **Compatibilidad**: Web y m√≥vil (Expo)
‚ö†Ô∏è **Pendiente**: Optimizaci√≥n para dispositivos m√≥viles reales

## Bit√°cora de trabajo ‚Äî 2025-09-21

### Nueva Pesta√±a "Esta Semana"
- **Nueva funcionalidad**: Pesta√±a dedicada para mostrar productos a trabajar por semana
- **Filtro por fecha**: Selector de semana con combobox (anterior/siguiente/esta semana)
- **Vista semanal**: Muestra productos agrupados por semana seleccionada
- **Formato de productos**: "1. pastel, chocolate, tama√±o, relleno" con capitalizaci√≥n correcta
- **Navegaci√≥n intuitiva**: Botones de anterior/siguiente semana + selector Esta Semana

### Optimizaciones de UI/UX M√≥vil
- **Footer/Tab Bar responsive**: Ajustes autom√°ticos seg√∫n tama√±o de pantalla
- **Distribuci√≥n perfecta**: Eliminaci√≥n de espacios vac√≠os en la barra inferior
- **T√≠tulos adaptativos**: Nombres cortos en pantallas peque√±as ("Cal.", "Pr√≥x.", "Sem.")
- **Compatibilidad Android**: Optimizaciones espec√≠ficas para dispositivos Android

### Sistema de Notificaciones Avanzado
- **Notificaciones push preparadas**: Arquitectura completa para Firebase Cloud Messaging
- **Notificaciones locales**: Sistema robusto con recordatorios programados
- **Configuraci√≥n completa**: Activaci√≥n/desactivaci√≥n, d√≠as de anticipaci√≥n (0-7 d√≠as)
- **Manejo de tokens**: Sistema preparado para tokens de dispositivo

### Correcciones T√©cnicas Cr√≠ticas
- **Error FlatList resuelto**: Import faltante en proximos-pedidos.tsx
- **Error TypeScript solucionado**: Configuraci√≥n tsconfig.json corregida
- **Error dbService.initDB**: Funci√≥n de inicializaci√≥n de base de datos corregida
- **Firebase temporalmente deshabilitado**: Para evitar errores de configuraci√≥n

### Arquitectura H√≠brida de Base de Datos
- **Sistema h√≠brido implementado**: SQLite local + Firebase para sincronizaci√≥n
- **Im√°genes locales**: Optimizaci√≥n de almacenamiento (im√°genes no suben a Firebase)
- **Sincronizaci√≥n offline**: Funcionalidad completa de trabajo sin conexi√≥n
- **Modo local seguro**: Aplicaci√≥n funciona completamente sin Firebase

### Mejoras de Navegaci√≥n y Responsividad
- **Logout en header**: Movido desde footer a header de pantalla principal
- **Botones reorganizados**: Gesti√≥n de Pedidos | üö™ Salir | ‚öôÔ∏è
- **Calendario mejorado**: Botones de navegaci√≥n m√°s visibles, selector de mes
- **Paso de fecha**: Calendario pasa fecha seleccionada a "Nuevo Pedido"
- **Header √∫nico**: Eliminaci√≥n de headers dobles en todas las pantallas

### Correcciones de UI y Formato
- **Estad√≠sticas corregidas**: Fechas de meses mostradas correctamente (sin desfase por zona horaria)
- **Capitalizaci√≥n de productos**: Nombres de productos con primera letra may√∫scula
- **Layout del mensaje**: Mensaje de bienvenida corregido en pantalla principal
- **Optimizaci√≥n de espacio**: Mejor aprovechamiento del espacio en footer m√≥vil

### Estado Actual del Proyecto
‚úÖ **Funcionalidades completas**: CRUD pedidos, cotizaciones PDF, estad√≠sticas, calendario, configuraci√≥n, notificaciones
‚úÖ **Sistema de roles operativo**: Control de acceso por usuarios (admin/due√±o/repostero)
‚úÖ **Compatibilidad**: Web y m√≥vil (Expo) funcionando correctamente
‚úÖ **Base de datos h√≠brida**: SQLite + Firebase (deshabilitado temporalmente)
‚úÖ **Notificaciones**: Sistema local completo, push preparado
‚úÖ **UI/UX optimizada**: Responsive para m√≥vil y web

### Pendientes Cr√≠ticos (Pr√≥xima Sesi√≥n)
1. **Configurar Firebase**: Activar sincronizaci√≥n en la nube cuando se configure la cuenta
2. **Testing en dispositivos reales**: Verificar funcionamiento en Android/iOS f√≠sicos
3. **Optimizaci√≥n de rendimiento**: Memoizaci√≥n en listas grandes, lazy loading
4. **Backup avanzado**: Exportaci√≥n con filtros de fecha y restauraci√≥n
5. **Documentaci√≥n completa**: Gu√≠a de instalaci√≥n y configuraci√≥n para usuarios finales

### Pr√≥ximos pasos sugeridos (alta prioridad)
1. **Testing en dispositivos reales** (Android/iOS)
2. **Optimizaci√≥n de rendimiento** en listas grandes
3. **Backup/export avanzado** con filtros de fecha
4. **Notificaciones push** (una vez configurado Firebase)
5. **Migraci√≥n a backend** (MySQL + API REST)
  